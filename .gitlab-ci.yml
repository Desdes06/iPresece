variables:
  OUTPUT_URL: "api-1.dev.torche.id"

stages:
  - preparation
  - build
  - scan
  - analyze
  - deploy

composer:
  stage: preparation
  only:
    #- master
    - dev
  script:
    - composer update --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts
    - composer dump-autoload
  artifacts:
    paths:
      - vendor/
    expire_in: 1 days
    when: always
  cache:
    paths:
      - vendor/
    key: 
      files: 
        - composer.lock

docker:
  stage: build
  only:
    #- master
    - dev
  before_script:
    - echo "$CUSTOM_REGISTRY_PASSWORD" | docker login -u "$CUSTOM_REGISTRY_USER" --password-stdin $CUSTOM_REGISTRY_URL
  script:
    - export IMAGE=$CUSTOM_REGISTRY_BASEDN/$CI_PROJECT_ROOT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
    - docker build -t $IMAGE .
    - docker push $IMAGE

trivy-scan:
  stage: scan
  dependencies:
    - docker
  allow_failure: true
  cache:
    paths:
      - .trivy/cache
  only:
    #- master
    - dev
  script:
    - export IMAGE=$CUSTOM_REGISTRY_BASEDN/$CI_PROJECT_ROOT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
    - trivy image -o trivy_report.json $IMAGE
    - trivy image --scanners vuln -f cyclonedx -o trivy_report-cyclonedx.json $IMAGE
    #- trivy image --exit-code 1 --severity CRITICAL $IMAGE
    - trivy sonarqube trivy_report.json --filePath=Dockerfile > sonar-report.json
    #- export DTRACK_URL=https://DTRACK-URL
    #- export DTRACK_API_KEY=VDqKdsbDvoF97SQXmVT6iU1Wj8dKiv1y
    #- export PROJECT_NAME=$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
    #- export BOM_FILE=`realpath ./trivy_report-cyclonedx.json`
    #- dtrack-uploader
  artifacts:
    paths:
      - trivy_report.json
      - sonar-report.json
      - trivy_report-cyclonedx.json

sonarqube-check:
  stage: analyze
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.login=$SONAR_TOKEN -Dsonar.externalIssuesReportPaths="sonar-report.json"
  allow_failure: true
  needs:
    - trivy-scan
  only:
    #- master
    - dev

kubernetes:
  stage: deploy
  only:
    #- master
    - dev
  script:
    - sed -i "s,<IMAGE_NAME>,${CUSTOM_REGISTRY_BASEDN}/${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME},g" .kubernetes/deploy.yml
    - sed -i "s,<IMAGE_VERSION>,${CI_COMMIT_SHORT_SHA},g" .kubernetes/deploy.yml
    - sed -i "s,<PROJECT_NAME>,${CI_PROJECT_NAME},g" .kubernetes/deploy.yml
    - sed -i "s,<PROJECT_NAMESPACE>,${CI_PROJECT_ROOT_NAMESPACE},g" .kubernetes/deploy.yml
    - sed -i "s,<OUTPUT_URL>,${CI_PROJECT_NAME}.${BASE_DOMAIN},g" .kubernetes/deploy.yml
    - sed -i "s,<PROJECT_NAME>,${CI_PROJECT_NAME},g" .kubernetes/config.yml
    - sed -i "s,<PROJECT_NAMESPACE>,${CI_PROJECT_ROOT_NAMESPACE},g" .kubernetes/config.yml
    - sed -i "s,<OUTPUT_URL>,${CI_PROJECT_NAME}.${BASE_DOMAIN},g" .kubernetes/config.yml
    - kubectl apply -f .kubernetes/config.yml
    - kubectl apply -f .kubernetes/deploy.yml
    - echo "Application should be accessible at https://${CI_PROJECT_NAME}.${BASE_DOMAIN}";
